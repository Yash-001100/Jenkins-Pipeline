pipeline {
    agent any

    stages {
        stage("Build and Package") {
            steps {
                echo "Starting the build process: Compiling and packaging the application using Maven"
                echo "Executing: mvn clean package"
                // Using Maven to compile, build, and package the source code
            }
        }

        stage("Run Unit and Integration Tests") {
            steps {
                echo "Running Unit and Integration Tests with Maven"
                echo "Executing: mvn test"
                // Maven command to run both unit and integration tests
            }
            post {
                success {
                    emailext to: "kalrayashpreet@gmail.com",
                    subject: "Unit and Integration Tests Completed Successfully",
                    body: "The unit and integration tests have passed. Attached is the build log for further review.",
                    attachLog: true
                }
                failure {
                    emailext to: "kalrayashpreet@gmail.com",
                    subject: "Unit and Integration Tests Failed",
                    body: "The unit and integration tests have failed. Attached is the build log for investigation.",
                    attachLog: true
                }
            }
        }

        stage("Code Quality Analysis") {
            steps {
                echo "Performing Code Quality Analysis using SonarQube"
                echo "Executing: sonar-scanner"
                // SonarQube command for static code analysis and quality check
            }
        }

        stage("Security Vulnerability Scan") {
            steps {
                echo "Initiating Security Scan using OWASP ZAP"
                echo "Starting ZAP and scanning the target application"
                echo "Executing: zap-cli start && zap-cli open-url http://localhost:8080 && zap-cli active-scan http://localhost:8080"
                echo "Generating scan report: zap-cli report -o zap_report.html -f html"
                // OWASP ZAP commands for performing the security scan and generating reports
            }
            post {
                success {
                    emailext to: "kalrayashpreet@gmail.com",
                    subject: "Security Scan Passed",
                    body: "The security scan has successfully completed. Build log attached for review.",
                    attachLog: true
                }
                failure {
                    emailext to: "kalrayashpreet@gmail.com",
                    subject: "Security Scan Failed",
                    body: "The security scan has failed. Build log attached for investigation.",
                    attachLog: true
                }
            }
        }

        stage("Deploy to Staging Environment") {
            steps {
                echo "Deploying the application to AWS EC2 Staging environment"
                echo "Copying application package to S3 bucket: s3://staging-bucket/"
                echo "Starting the staging EC2 instance"
                // AWS commands to upload the package and start the staging environment
                sh '''
                    aws s3 cp target/app.war s3://staging-bucket/app.war
                    aws ec2 describe-instances --filters "Name=tag:Name,Values=StagingServer"
                    aws ec2 start-instances --instance-ids i-0123456789abcdef0
                '''
            }
        }

        stage("Integration Tests on Staging") {
            steps {
                echo "Running Integration Tests on Staging using Maven Failsafe"
                echo "Executing: mvn failsafe:integration-test failsafe:verify"
                // Maven command to run the integration tests on the staging environment
            }
            post {
                success {
                    emailext to: "kalrayashpreet@gmail.com",
                    subject: "Integration Tests on Staging Passed",
                    body: "The integration tests on the staging environment have passed successfully. Attached is the build log.",
                    attachLog: true
                }
                failure {
                    emailext to: "kalrayashpreet@gmail.com",
                    subject: "Integration Tests on Staging Failed",
                    body: "The integration tests on the staging environment have failed. Attached is the build log for investigation.",
                    attachLog: true
                }
            }
        }

        stage("Deploy to Production Environment") {
            steps {
                echo "Deploying the application to the AWS EC2 Production environment"
                echo "Copying application package to S3 bucket: s3://production-bucket/"
                echo "Starting the production EC2 instance"
                // AWS commands to deploy the application to production
                sh '''
                    aws s3 cp target/app.war s3://production-bucket/app.war
                    aws ec2 describe-instances --filters "Name=tag:Name,Values=ProductionServer"
                    aws ec2 start-instances --instance-ids i-0abcdef1234567890
                '''
            }
        }
    }
    
    post {
        success {
            echo "Pipeline execution completed successfully!"
        }
        failure {
            echo "Pipeline execution failed. Check the logs for errors."
        }
    }
}

